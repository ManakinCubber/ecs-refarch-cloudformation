Description: Target groups for ALB and manakin project

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    EnvDomain:
        Description: An domain name for the url
        Type: String

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    ALB80Listener:
        Description: Choose which listener you want to use for the 80 port
        Type: String

    ALB443Listener:
        Description: Choose which listener you want to use for the 443 port
        Type: String

Resources:
  ConsulTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Consul
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /v1/agent/members
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ConsulListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ConsulTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub consul.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB80Listener
      Priority: 1

  ConsulListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ConsulTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub consul.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB443Listener
      Priority: 1

  ApyBackTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Apy-Back
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /ping
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ApyBackListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApyBackTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub apy.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB80Listener
      Priority: 2

  ApyBackListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApyBackTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub apy.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB443Listener
      Priority: 2

  ApyFrontTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Apy-Front
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ApyFrontListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApyFrontTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub app.${EnvDomain}apy-paie.fr
      ListenerArn:
        Ref: ALB80Listener
      Priority: 3

  ApyFrontListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApyFrontTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub app.${EnvDomain}apy-paie.fr
      ListenerArn:
        Ref: ALB443Listener
      Priority: 3

  ApyVitrineTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Apy-Vitrine
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ApyVitrineListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApyVitrineTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub ${EnvDomain}apy-paie.fr
      ListenerArn:
        Ref: ALB80Listener
      Priority: 4

  ApyVitrineListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApyVitrineTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub ${EnvDomain}apy-paie.fr
      ListenerArn:
        Ref: ALB443Listener
      Priority: 4


  InvoiceBackTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Invoice-Back
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /ping
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  InvoiceBackListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: InvoiceBackTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub invoice.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB80Listener
      Priority: 5

  InvoiceBackListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: InvoiceBackTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub invoice.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB443Listener
      Priority: 5

  invoiceFrontTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Invoice-Front
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  InvoiceFrontListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: invoiceFrontTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub app.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB80Listener
      Priority: 6

  InvoiceFrontListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: invoiceFrontTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub app.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB443Listener
      Priority: 6

  GatewayTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Gateway
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /ping
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  GatewayListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: GatewayTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub api.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB80Listener
      Priority: 7

  GatewayListenerHttpsRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: GatewayTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Sub api.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB443Listener
      Priority: 7

  DocumentTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub ${EnvironmentName}-Document
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /ping
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  DocumentListernerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: Forward
          TargetGroupArn:
            Ref: DocumentApiTargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Sub document.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB80Listener
      Priority: 8

  DocumentHttpsListernerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: Forward
          TargetGroupArn:
            Ref: DocumentApiTargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Sub document.${EnvDomain}manakin.ninja
      ListenerArn:
        Ref: ALB443Listener
      Priority: 8


